//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LemonCat.Models.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LemonCatEntities : DbContext
    {
        public LemonCatEntities()
            : base("name=LemonCatEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ANHDIENVIEN> ANHDIENVIENs { get; set; }
        public virtual DbSet<ANHPHIM> ANHPHIMs { get; set; }
        public virtual DbSet<BAG> BAGs { get; set; }
        public virtual DbSet<BAIVIET_CHILDCOMMENT> BAIVIET_CHILDCOMMENT { get; set; }
        public virtual DbSet<BAIVIET_ROOTCOMMENT> BAIVIET_ROOTCOMMENT { get; set; }
        public virtual DbSet<BAIVIET_ROOTSCORE> BAIVIET_ROOTSCORE { get; set; }
        public virtual DbSet<BAIVIET_SCORE> BAIVIET_SCORE { get; set; }
        public virtual DbSet<BAIVIETDANHGIA> BAIVIETDANHGIAs { get; set; }
        public virtual DbSet<ChildCommentNew> ChildCommentNews { get; set; }
        public virtual DbSet<CHITIETDIENVIENNEW> CHITIETDIENVIENNEWs { get; set; }
        public virtual DbSet<CHITIETHOADON> CHITIETHOADONs { get; set; }
        public virtual DbSet<CHITIETPHIMNEW> CHITIETPHIMNEWs { get; set; }
        public virtual DbSet<CHUCVU> CHUCVUs { get; set; }
        public virtual DbSet<DAODIENPHIM> DAODIENPHIMs { get; set; }
        public virtual DbSet<DATASET> DATASETs { get; set; }
        public virtual DbSet<DIENVIEN> DIENVIENs { get; set; }
        public virtual DbSet<DIENVIENPHIM> DIENVIENPHIMs { get; set; }
        public virtual DbSet<DVD> DVDs { get; set; }
        public virtual DbSet<GENRE> GENREs { get; set; }
        public virtual DbSet<GENREPHIM> GENREPHIMs { get; set; }
        public virtual DbSet<HanChieu> HanChieux { get; set; }
        public virtual DbSet<HOADON> HOADONs { get; set; }
        public virtual DbSet<KICHBANPHIM> KICHBANPHIMs { get; set; }
        public virtual DbSet<LOAINEW> LOAINEWs { get; set; }
        public virtual DbSet<NETWORK> NETWORKs { get; set; }
        public virtual DbSet<NEW> NEWs { get; set; }
        public virtual DbSet<NewsScore> NewsScores { get; set; }
        public virtual DbSet<ORDERSEAT> ORDERSEATs { get; set; }
        public virtual DbSet<PHIM> PHIMs { get; set; }
        public virtual DbSet<RAPPHIM> RAPPHIMs { get; set; }
        public virtual DbSet<RATING> RATINGs { get; set; }
        public virtual DbSet<RootCommentNew> RootCommentNews { get; set; }
        public virtual DbSet<RootNewScore> RootNewScores { get; set; }
        public virtual DbSet<SCORE> SCOREs { get; set; }
        public virtual DbSet<STUDIO> Studios { get; set; }
        public virtual DbSet<SUATCHIEU> SUATCHIEUx { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TAGS_MOVIE> TAGS_MOVIE { get; set; }
        public virtual DbSet<TAGS_PERSON> TAGS_PERSON { get; set; }
        public virtual DbSet<TAIKHOAN> TAIKHOANs { get; set; }
        public virtual DbSet<TVSHOW> TVSHOWs { get; set; }
        public virtual DbSet<TVSHOWEP> TVSHOWEPs { get; set; }
        public virtual DbSet<VIEWEDPRODUCT> VIEWEDPRODUCTs { get; set; }
        public virtual DbSet<YEARDATA> YEARDATAs { get; set; }
    
        public virtual ObjectResult<SelectAllCustomers_Result> SelectAllCustomers(string city)
        {
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllCustomers_Result>("SelectAllCustomers", cityParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateUser(Nullable<int> id, string firstName, string lastName, string email, string phone, string cMND, string diaChi)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var cMNDParameter = cMND != null ?
                new ObjectParameter("CMND", cMND) :
                new ObjectParameter("CMND", typeof(string));
    
            var diaChiParameter = diaChi != null ?
                new ObjectParameter("DiaChi", diaChi) :
                new ObjectParameter("DiaChi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", idParameter, firstNameParameter, lastNameParameter, emailParameter, phoneParameter, cMNDParameter, diaChiParameter);
        }
    
        public virtual int ChangePassword(Nullable<int> id, string oPassword, string nPassword, string rNPassword, string rPassword)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var oPasswordParameter = oPassword != null ?
                new ObjectParameter("OPassword", oPassword) :
                new ObjectParameter("OPassword", typeof(string));
    
            var nPasswordParameter = nPassword != null ?
                new ObjectParameter("NPassword", nPassword) :
                new ObjectParameter("NPassword", typeof(string));
    
            var rNPasswordParameter = rNPassword != null ?
                new ObjectParameter("RNPassword", rNPassword) :
                new ObjectParameter("RNPassword", typeof(string));
    
            var rPasswordParameter = rPassword != null ?
                new ObjectParameter("RPassword", rPassword) :
                new ObjectParameter("RPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", idParameter, oPasswordParameter, nPasswordParameter, rNPasswordParameter, rPasswordParameter);
        }
    
        public virtual int SubmitBag(Nullable<int> id, string note, string ngayLapHoaDon)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var ngayLapHoaDonParameter = ngayLapHoaDon != null ?
                new ObjectParameter("NgayLapHoaDon", ngayLapHoaDon) :
                new ObjectParameter("NgayLapHoaDon", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SubmitBag", idParameter, noteParameter, ngayLapHoaDonParameter);
        }
    }
}
